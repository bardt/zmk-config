/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
   flavor = "tap-preferred";
};

/ {
        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <1 2>;
                then-layer = <4>;
            }
        };

        behaviors {
            hm: homerow_mods {
                compatible = "zmk,behavior-hold-top";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <150>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };

            bspc_del: backspace_delete {
                compatible = "zmk,behavior-mod-morph";
                label = "BACKSPACE_DELETE";
                #binding-cells = <0>;
                bindings = <&kp BACKSPACE>, <&kp DELETE>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
                keep-mods = <(MOD_RSFT)>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |     |
// | TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// | CAPS|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |     |
//                   | NAV | LWR | SPC |   | ENT | RSE  | NAV |
                        bindings = <
   &kp ESC      &kp Q           &kp W       &kp E       &kp R       &kp T       &kp Y   &kp U       &kp I       &kp O       &kp P           &none
   &kp TAB      &hm LSHIFT A    &hm LCTRL S &hm LALT D  &hm LGUI F  &kp G       &kp H   &hm RGUI J  &hm RALT K  &hm RCTRL L &hm RSHIFT SEMI &kp SQT
   &kp CAPSLOCK &kp Z           &kp X       &kp C       &kp V       &kp B       &kp N   &kp M       &kp COMMA   &kp DOT     &kp FSLH        &trans
                                            &mo 3       &mo 1       &kp SPACE   &kp RET &mo 2       &mo 3
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
// |      |     |     |     |     |     |   | F1  | F2  | F3  | F4  | F5  | F6  |
// |      |     |     |     |     |     |   | F7  | F8  | F9  | F10 | F11 | F12 |
//                    |     |     | SPC |   | ENT |     |     |
                        bindings = <
    &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5      &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
    &trans  &trans  &trans  &trans  &trans  &trans      &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6
    &trans  &trans  &trans  &trans  &trans  &trans      &kp F7  &kp F8  &kp F9  &kp F10 &kp F11 &kp F12
                            &trans  &trans  &kp SPACE   &kp RET &trans   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// |      |     |  <  |  >  |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// |      |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
    &trans  &kp EXCL    &kp AT  &kp HASH    &kp DLLR    &kp PRCNT   &kp CARET   &kp AMPS    &kp KP_MULTIPLY &kp LPAR    &kp RPAR    &trans
    &trans  &trans      &kp LT  &kp GT      &trans      &trans      &kp MINUS   &kp EQUAL   &kp LBKT        &kp RBKT    &kp BSLH    &kp GRAVE
    &trans  &trans      &trans  &trans      &trans      &trans      &kp UNDER   &kp PLUS    &kp LBRC        &kp RBRC    &kp PIPE    &kp TILDE
                                &trans      &trans       &kp SPACE   &kp RET     &trans      &trans
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |     |     |  UP |     |     |     |
// |     |     |     |     |     |     |   | BKSP| LEFT| DOWN|RIGHT|     |     |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//                   |     |     | SPC |   | ENT |     |     |
                        bindings = <
    &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &kp UP      &trans      &trans  &trans  
    &trans  &trans  &trans  &trans  &trans  &trans  &bspc_del   &kp LEFT    &kp DOWN    &kp RIGHT   &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans      &trans      &trans  &trans  
                            &trans  &trans  &trans  &trans      &trans      &trans                     
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |BR UP| MUT | V DN| V UP|     |     |
// |     |     |     |     |     |     |   |BR DN| BCK | PLAY| FWD |     |     |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//                   |     |     | SPC |   | ENT |     |     |
                        bindings = <
    &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &kp C_BRI_UP   &kp K_MUTE  &kp C_VOL_DN    &kp C_VOL_UP    &trans  &trans
    &trans      &trans          &trans          &trans          &trans          &trans          &kp C_BRI_DN   &kp C_PREV  &kp C_PP        &kp C_NEXT      &trans  &trans
    &trans      &trans          &trans          &trans          &trans          &trans          &trans      &trans      &trans          &trans          &trans  &trans 
                                                &trans          &trans          &kp SPACE       &kp RET     &trans      &trans
                        >;
                };
        };
};
